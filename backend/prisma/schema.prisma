generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  email             String      @unique
  password          String
  name              String?
  admin             Boolean     @default(false)
  notificationToken String?
  createdAt         DateTime    @default(now())
  favourites        Favourite[]
  preferences       UserPreferences?

  @@index([email])
}

model UserPreferences {
  id                     Int     @id @default(autoincrement())
  userId                 Int     @unique
  showWelcomeHeader      Boolean @default(true)
  showStatsCards         Boolean @default(true)
  showRecentItems        Boolean @default(true)
  showRoomDistribution   Boolean @default(true)
  showAlertsPerMonth     Boolean @default(true)
  showInventoryValue     Boolean @default(true)
  showStatusDistribution Boolean @default(true)
  user                   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Item {
  id              Int           @id @default(autoincrement())
  name            String
  quantity        Int           @default(1)
  image           String?
  price           Float?
  sellprice       Float?
  status          String?
  consumable      Boolean       @default(false)
  placeId         Int?
  roomId          Int?
  containerId     Int?
  itemLink        String?
  importanceScore Float         @default(0)
  alerts          Alert[]
  favourites      Favourite[]
  container       Container?    @relation(fields: [containerId], references: [id])
  place           Place?        @relation(fields: [placeId], references: [id])
  room            Room?         @relation("RoomToItems", fields: [roomId], references: [id])
  itemTags        ItemTag[]
  projectItems    ProjectItem[]

  @@index([placeId])
  @@index([roomId])
  @@index([containerId], map: "Item_containerId_fkey")
  @@index([importanceScore])
}

model Place {
  id        Int         @id @default(autoincrement())
  name      String
  icon      String?
  roomId    Int?
  Container Container[]
  items     Item[]
  room      Room?       @relation("RoomToPlaces", fields: [roomId], references: [id])

  @@unique([name, roomId])
  @@index([roomId])
}

model Room {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  icon      String?
  Container Container[]
  items     Item[]      @relation("RoomToItems")
  places    Place[]     @relation("RoomToPlaces")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  icon     String?
  itemTags ItemTag[]
}

model ItemTag {
  id     Int  @id @default(autoincrement())
  itemId Int
  tagId  Int
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([itemId, tagId])
  @@index([tagId])
  @@index([itemId])
}

model Favourite {
  id     Int  @id @default(autoincrement())
  userId Int
  itemId Int
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@index([userId])
  @@index([itemId])
}

model Container {
  id      Int     @id @default(autoincrement())
  name    String
  icon    String?
  roomId  Int?
  placeId Int?
  place   Place?  @relation(fields: [placeId], references: [id])
  room    Room?   @relation(fields: [roomId], references: [id])
  items   Item[]

  @@index([roomId])
  @@index([placeId])
}

model Alert {
  id        Int       @id @default(autoincrement())
  itemId    Int
  threshold Int
  name      String?
  isActive  Boolean   @default(true)
  lastSent  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  item      Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([itemId, threshold])
  @@index([itemId])
  @@index([isActive])
  @@index([threshold])
}

model Project {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String?
  status       ProjectStatus   @default(ACTIVE)
  priority     ProjectPriority @default(MEDIUM)
  startDate    DateTime?
  endDate      DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  projectItems ProjectItem[]

  @@index([status])
  @@index([priority])
  @@index([startDate])
  @@index([endDate])
}

model ProjectItem {
  id        Int      @id @default(autoincrement())
  projectId Int
  itemId    Int
  quantity  Int      @default(1)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, itemId])
  @@index([projectId])
  @@index([itemId])
  @@index([isActive])
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}
