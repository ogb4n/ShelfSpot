name: Security Audit

on:
  schedule:
    # Ex√©cute chaque lundi √† 8h00 UTC
    - cron: '0 8 * * 1'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-audit:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Audit dependencies
      run: yarn audit --json > audit-results.json || true

    - name: Check for high/critical vulnerabilities
      run: |
        if [ -f audit-results.json ]; then
          HIGH_VULNS=$(cat audit-results.json | jq '.advisories | to_entries | map(select(.value.severity == "high" or .value.severity == "critical")) | length')
          echo "Found $HIGH_VULNS high/critical vulnerabilities"
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "‚ùå High or critical vulnerabilities found!"
            cat audit-results.json | jq '.advisories | to_entries | map(select(.value.severity == "high" or .value.severity == "critical")) | .[].value | "- \(.title) (\(.severity)): \(.url)"'
            exit 1
          else
            echo "‚úÖ No high or critical vulnerabilities found"
          fi
        fi

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run ESLint
      run: yarn lint --format json --output-file eslint-results.json || true

    - name: Annotate ESLint results
      uses: ataylorme/eslint-annotate-action@v2
      if: always()
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        report-json: "eslint-results.json"

  docker-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image for scanning
      run: docker build -t shelfspot-security-scan .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'shelfspot-security-scan'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Run Hadolint (Dockerfile linter)
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  prisma-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Generate Prisma client
      run: yarn prisma generate

    - name: Validate Prisma schema
      run: yarn prisma validate

    - name: Check for Prisma schema best practices
      run: |
        echo "üîç Checking Prisma schema for potential security issues..."
        
        # V√©rifier les champs sensibles non chiffr√©s
        if grep -q "password.*String" prisma/schema.prisma; then
          echo "‚ö†Ô∏è  Warning: Password fields should be hashed"
        fi
        
        # V√©rifier la pr√©sence d'index sur les champs de recherche
        if ! grep -q "@@index" prisma/schema.prisma; then
          echo "üí° Suggestion: Consider adding database indexes for better performance"
        fi
        
        echo "‚úÖ Prisma schema validation completed"
