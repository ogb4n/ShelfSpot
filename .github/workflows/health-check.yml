name: Health Check & Performance

on:
  schedule:
    # Vérifie toutes les heures
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to test (optional)'
        required: false
        default: 'http://localhost:3000'

jobs:
  docker-health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and start application
      run: |
        docker build -t shelfspot-health-test .
        docker run -d --name shelfspot-test -p 3000:3000 \
          -e NODE_ENV=production \
          -e NEXTAUTH_URL=http://localhost:3000 \
          -e NEXTAUTH_SECRET=test-secret-for-health-check \
          -e DATABASE_URL="file:./dev.db" \
          shelfspot-health-test

    - name: Wait for application startup
      run: |
        echo "Waiting for application to start..."
        for i in {1..30}; do
          if curl -s http://localhost:3000 > /dev/null; then
            echo "✅ Application is responding"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Application failed to start within 30 seconds"
            docker logs shelfspot-test
            exit 1
          fi
          sleep 1
        done

    - name: Basic health checks
      run: |
        echo "🔍 Running basic health checks..."
        
        # Test de la page d'accueil
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
        if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "302" ]; then
          echo "✅ Homepage accessible (HTTP $RESPONSE)"
        else
          echo "❌ Homepage failed (HTTP $RESPONSE)"
          exit 1
        fi
        
        # Test des routes API
        API_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "404")
        echo "ℹ️ API health endpoint: HTTP $API_RESPONSE"
        
        # Test de performance basique
        LOAD_TIME=$(curl -s -o /dev/null -w "%{time_total}" http://localhost:3000)
        echo "⏱️ Page load time: ${LOAD_TIME}s"
        
        if [ "$(echo "$LOAD_TIME > 5.0" | bc -l 2>/dev/null || echo 0)" = "1" ]; then
          echo "⚠️ Warning: Slow page load time (>${LOAD_TIME}s)"
        fi

    - name: Memory and resource usage
      run: |
        echo "📊 Checking resource usage..."
        
        # Utilisation mémoire du container
        MEMORY_USAGE=$(docker stats shelfspot-test --no-stream --format "{{.MemUsage}}" | cut -d'/' -f1)
        echo "💾 Memory usage: $MEMORY_USAGE"
        
        # Logs du container pour détecter des erreurs
        echo "📋 Recent container logs:"
        docker logs --tail 20 shelfspot-test

    - name: Database connectivity (if applicable)
      run: |
        echo "🗃️ Checking database connectivity..."
        
        # Vérifier si la base de données est accessible
        docker exec shelfspot-test ls -la /app/prisma/ || echo "No prisma directory found"
        
        # Test de base pour voir si l'application peut accéder à la DB
        echo "Database check completed"

    - name: Cleanup
      if: always()
      run: |
        docker stop shelfspot-test || true
        docker rm shelfspot-test || true
        docker rmi shelfspot-health-test || true

  performance-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Analyze bundle size
      run: |
        echo "📦 Analyzing bundle size..."
        
        yarn build
        
        # Analyser la taille des bundles
        if [ -d ".next/static" ]; then
          echo "📊 Bundle analysis:"
          find .next/static -name "*.js" -exec ls -lh {} \; | awk '{print $5 "\t" $9}' | sort -hr | head -10
          
          # Vérifier si les bundles sont trop gros
          LARGEST_BUNDLE=$(find .next/static -name "*.js" -exec stat -f%z {} \; 2>/dev/null | sort -nr | head -1 || find .next/static -name "*.js" -exec stat -c%s {} \; | sort -nr | head -1)
          if [ "$LARGEST_BUNDLE" -gt 1000000 ]; then
            echo "⚠️ Warning: Large bundle detected (${LARGEST_BUNDLE} bytes)"
            echo "Consider code splitting or analyzing imports"
          else
            echo "✅ Bundle sizes look good"
          fi
        fi

    - name: Lighthouse CI (if applicable)
      run: |
        echo "🔍 Performance recommendations:"
        echo "- Consider implementing service workers for caching"
        echo "- Optimize images and use Next.js Image component"
        echo "- Implement lazy loading for non-critical components"
        echo "- Consider using Next.js dynamic imports"

  security-headers-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and start application
      run: |
        docker build -t shelfspot-security-test .
        docker run -d --name shelfspot-security -p 3001:3000 \
          -e NODE_ENV=production \
          -e NEXTAUTH_URL=http://localhost:3001 \
          -e NEXTAUTH_SECRET=test-secret \
          -e DATABASE_URL="file:./dev.db" \
          shelfspot-security-test

    - name: Wait for startup
      run: sleep 10

    - name: Check security headers
      run: |
        echo "🔒 Checking security headers..."
        
        HEADERS=$(curl -s -I http://localhost:3001)
        
        echo "Response headers:"
        echo "$HEADERS"
        echo ""
        
        # Vérifier les headers de sécurité importants
        if echo "$HEADERS" | grep -i "x-frame-options"; then
          echo "✅ X-Frame-Options header present"
        else
          echo "⚠️ Missing X-Frame-Options header"
        fi
        
        if echo "$HEADERS" | grep -i "x-content-type-options"; then
          echo "✅ X-Content-Type-Options header present"
        else
          echo "⚠️ Missing X-Content-Type-Options header"
        fi
        
        if echo "$HEADERS" | grep -i "strict-transport-security"; then
          echo "✅ HSTS header present"
        else
          echo "ℹ️ Consider adding HSTS header for HTTPS"
        fi

    - name: Cleanup security test
      if: always()
      run: |
        docker stop shelfspot-security || true
        docker rm shelfspot-security || true
        docker rmi shelfspot-security-test || true

  deployment-readiness:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment files
      run: |
        echo "📋 Checking deployment readiness..."
        
        # Vérifier la présence des fichiers essentiels
        FILES=("Dockerfile" "docker-compose.yml" ".env.example" "package.json")
        
        for file in "${FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file exists"
          else
            echo "❌ $file missing"
          fi
        done
        
        # Vérifier la configuration Docker
        if grep -q "EXPOSE" Dockerfile; then
          echo "✅ Dockerfile exposes ports"
        else
          echo "⚠️ No EXPOSE directive in Dockerfile"
        fi
        
        # Vérifier les variables d'environnement
        if [ -f ".env.example" ]; then
          echo "📋 Environment variables to configure:"
          cat .env.example | grep -v "^#" | grep "=" || echo "No environment variables found"
        fi

    - name: Generate deployment summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Application Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Name**: ShelfSpot" >> $GITHUB_STEP_SUMMARY
        echo "- **Type**: Self-hosted inventory management" >> $GITHUB_STEP_SUMMARY
        echo "- **Framework**: Next.js with Prisma" >> $GITHUB_STEP_SUMMARY
        echo "- **Port**: 3000" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo 'docker pull ghcr.io/${{ github.repository }}:latest' >> $GITHUB_STEP_SUMMARY
        echo 'docker-compose up -d' >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
