name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'README.md'
      - 'package.json'
      - 'prisma/schema.prisma'
  workflow_dispatch:

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Generate Prisma documentation
      run: |
        mkdir -p docs
        echo "# 🗃️ Database Schema" > docs/database.md
        echo "" >> docs/database.md
        echo "Auto-generated documentation for the ShelfSpot database schema." >> docs/database.md
        echo "" >> docs/database.md
        echo '```prisma' >> docs/database.md
        cat prisma/schema.prisma >> docs/database.md
        echo '```' >> docs/database.md

    - name: Generate API documentation
      run: |
        echo "# 🔌 API Documentation" > docs/api.md
        echo "" >> docs/api.md
        echo "Auto-generated API documentation for ShelfSpot." >> docs/api.md
        echo "" >> docs/api.md
        
        # Analyser les routes API
        echo "## 📋 Available Endpoints" >> docs/api.md
        echo "" >> docs/api.md
        
        if [ -d "src/app/api" ]; then
          find src/app/api -name "route.ts" -type f | while read -r file; do
            DIR=$(dirname "$file" | sed 's|src/app/api||' | sed 's|/route||')
            if [ "$DIR" = "" ]; then
              DIR="/"
            fi
            echo "### \`$DIR\`" >> docs/api.md
            echo "" >> docs/api.md
            
            # Extraire les méthodes HTTP
            METHODS=$(grep -o "export async function [A-Z]*" "$file" 2>/dev/null | sed 's/export async function /- /' || echo "- Methods not detected")
            echo "$METHODS" >> docs/api.md
            echo "" >> docs/api.md
          done
        fi

    - name: Generate component documentation
      run: |
        echo "# 🧩 Components Documentation" > docs/components.md
        echo "" >> docs/components.md
        echo "Auto-generated components documentation for ShelfSpot." >> docs/components.md
        echo "" >> docs/components.md
        
        if [ -d "src/components" ]; then
          echo "## 📦 Available Components" >> docs/components.md
          echo "" >> docs/components.md
          
          find src/components -name "*.tsx" -type f | while read -r file; do
            COMPONENT=$(basename "$file" .tsx)
            echo "### $COMPONENT" >> docs/components.md
            echo "" >> docs/components.md
            echo "**Location**: \`$file\`" >> docs/components.md
            echo "" >> docs/components.md
            
            # Extraire les props si possible
            PROPS=$(grep -o "interface.*Props" "$file" 2>/dev/null | head -1 || echo "")
            if [ -n "$PROPS" ]; then
              echo "**Props Interface**: \`$PROPS\`" >> docs/components.md
              echo "" >> docs/components.md
            fi
          done
        fi

    - name: Generate deployment guide
      run: |
        echo "# 🚀 Deployment Guide" > docs/deployment.md
        echo "" >> docs/deployment.md
        echo "Complete deployment guide for self-hosting ShelfSpot." >> docs/deployment.md
        echo "" >> docs/deployment.md
        
        echo "## 🐳 Docker Deployment" >> docs/deployment.md
        echo "" >> docs/deployment.md
        echo "### Prerequisites" >> docs/deployment.md
        echo "- Docker Engine 20.10+" >> docs/deployment.md
        echo "- Docker Compose 2.0+" >> docs/deployment.md
        echo "- 2GB RAM minimum" >> docs/deployment.md
        echo "- 10GB disk space" >> docs/deployment.md
        echo "" >> docs/deployment.md
        
        echo "### Quick Start" >> docs/deployment.md
        echo '```bash' >> docs/deployment.md
        echo '# Download the latest release' >> docs/deployment.md
        echo 'wget https://github.com/${{ github.repository }}/releases/latest/download/docker-compose.yml' >> docs/deployment.md
        echo '' >> docs/deployment.md
        echo '# Configure environment (copy and edit .env.example)' >> docs/deployment.md
        echo 'cp .env.example .env' >> docs/deployment.md
        echo 'nano .env' >> docs/deployment.md
        echo '' >> docs/deployment.md
        echo '# Start the application' >> docs/deployment.md
        echo 'docker-compose up -d' >> docs/deployment.md
        echo '```' >> docs/deployment.md
        echo "" >> docs/deployment.md
        
        echo "### Environment Variables" >> docs/deployment.md
        echo "" >> docs/deployment.md
        if [ -f ".env.example" ]; then
          echo "| Variable | Description | Required |" >> docs/deployment.md
          echo "|----------|-------------|----------|" >> docs/deployment.md
          grep -v "^#" .env.example | grep "=" | while IFS='=' read -r key value; do
            echo "| \`$key\` | Configuration for $key | ✅ |" >> docs/deployment.md
          done || echo "| See .env.example | Various configurations | ✅ |" >> docs/deployment.md
        fi
        echo "" >> docs/deployment.md
        
        echo "## 🔧 Manual Deployment" >> docs/deployment.md
        echo "" >> docs/deployment.md
        echo '```bash' >> docs/deployment.md
        echo '# Clone the repository' >> docs/deployment.md
        echo 'git clone https://github.com/${{ github.repository }}.git' >> docs/deployment.md
        echo 'cd shelfspot' >> docs/deployment.md
        echo '' >> docs/deployment.md
        echo '# Install dependencies' >> docs/deployment.md
        echo 'yarn install' >> docs/deployment.md
        echo '' >> docs/deployment.md
        echo '# Setup database' >> docs/deployment.md
        echo 'yarn prisma generate' >> docs/deployment.md
        echo 'yarn prisma migrate deploy' >> docs/deployment.md
        echo '' >> docs/deployment.md
        echo '# Build and start' >> docs/deployment.md
        echo 'yarn build' >> docs/deployment.md
        echo 'yarn start' >> docs/deployment.md
        echo '```' >> docs/deployment.md

    - name: Generate changelog
      run: |
        echo "# 📝 Changelog" > docs/changelog.md
        echo "" >> docs/changelog.md
        echo "Automatically generated changelog from git history." >> docs/changelog.md
        echo "" >> docs/changelog.md
        
        # Générer le changelog depuis les tags
        git tag --sort=-version:refname | head -10 | while read -r tag; do
          if [ -n "$tag" ]; then
            echo "## $tag" >> docs/changelog.md
            echo "" >> docs/changelog.md
            
            PREV_TAG=$(git tag --sort=-version:refname | grep -A1 "^$tag$" | tail -1)
            if [ -n "$PREV_TAG" ] && [ "$PREV_TAG" != "$tag" ]; then
              git log --pretty=format:"- %s (%h)" --no-merges "$PREV_TAG..$tag" >> docs/changelog.md
            else
              git log --pretty=format:"- %s (%h)" --no-merges "$tag" | head -20 >> docs/changelog.md
            fi
            echo "" >> docs/changelog.md
            echo "" >> docs/changelog.md
          fi
        done

    - name: Update main README
      run: |
        # Ajouter des badges et des liens vers la documentation
        if ! grep -q "docs/" README.md; then
          echo "" >> README.md
          echo "## 📚 Documentation" >> README.md
          echo "" >> README.md
          echo "- [🔌 API Documentation](docs/api.md)" >> README.md
          echo "- [🗃️ Database Schema](docs/database.md)" >> README.md
          echo "- [🧩 Components](docs/components.md)" >> README.md
          echo "- [🚀 Deployment Guide](docs/deployment.md)" >> README.md
          echo "- [📝 Changelog](docs/changelog.md)" >> README.md
        fi

    - name: Commit documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add docs/
        git add README.md
        
        if ! git diff --staged --quiet; then
          git commit -m "📚 Update documentation [skip ci]"
          git push
        else
          echo "No documentation changes to commit"
        fi

  docker-readme:
    runs-on: ubuntu-latest
    needs: generate-api-docs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Docker Hub description
      run: |
        mkdir -p .docker
        
        cat > .docker/README.md << 'EOF'
        # 📦 ShelfSpot - Self-hosted Inventory Management
        
        ![Docker Pulls](https://img.shields.io/docker/pulls/shelfspot/shelfspot)
        ![Docker Image Size](https://img.shields.io/docker/image-size/shelfspot/shelfspot)
        ![Docker Image Version](https://img.shields.io/docker/v/shelfspot/shelfspot)
        
        ShelfSpot is a modern, self-hosted inventory management application built with Next.js, designed to help you track and organize all items in your home.
        
        ## 🚀 Quick Start
        
        ```bash
        # Create docker-compose.yml
        version: "3.8"
        services:
          shelfspot:
            image: ghcr.io/${{ github.repository }}:latest
            container_name: shelfspot
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - NEXTAUTH_URL=http://localhost:3000
              - NEXTAUTH_SECRET=your-secret-here
              - DATABASE_URL=file:./dev.db
            volumes:
              - shelfspot_data:/app/data
        
        volumes:
          shelfspot_data:
        
        # Start the application
        docker-compose up -d
        ```
        
        ## 🔧 Configuration
        
        ### Environment Variables
        
        | Variable | Description | Default |
        |----------|-------------|---------|
        | `NODE_ENV` | Environment mode | `production` |
        | `NEXTAUTH_URL` | Application URL | `http://localhost:3000` |
        | `NEXTAUTH_SECRET` | NextAuth secret key | Required |
        | `DATABASE_URL` | Database connection | `file:./dev.db` |
        
        ## 🌟 Features
        
        - **Inventory Management**: Track items with details like category, quantity, dates
        - **Location Tracking**: Organize items by specific locations
        - **User Management**: Multiple users with role-based access
        - **Modern UI**: Responsive design with dark/light themes
        - **Self-hosted**: Complete control over your data
        
        ## 📚 Documentation
        
        - [GitHub Repository](https://github.com/${{ github.repository }})
        - [Deployment Guide](https://github.com/${{ github.repository }}/blob/main/docs/deployment.md)
        - [API Documentation](https://github.com/${{ github.repository }}/blob/main/docs/api.md)
        
        ## 🏷️ Tags
        
        - `latest` - Latest stable release
        - `v1.0.0` - Specific version tags
        - `main` - Development version (not recommended for production)
        
        ## 💬 Support
        
        - [Issues](https://github.com/${{ github.repository }}/issues)
        - [Discussions](https://github.com/${{ github.repository }}/discussions)
        
        ---
        
        Built with ❤️ using Next.js, Prisma, and Docker
        EOF

    - name: Update repository description
      run: |
        echo "📋 Docker documentation generated at .docker/README.md"
        echo "This can be used for Docker Hub or other container registries"
